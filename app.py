import streamlit as st
import pandas as pd
import os

FILE_PATH = "nf_registro.xlsx"

# Definir as colunas necess√°rias
required_columns = [
    "N√∫mero NF", "Data", "Valor", "Fornecedor", "Descri√ß√£o",
    "Projeto", "Tipo", "Produto", "Descri√ß√£o do item", "M√™s contratado", 
    "RC, Contrato ou Direto", "Data de faturamento NF", 
    "Data Recebimento NF", "Data de lan√ßamento NF", "Valida√ß√£o Financeiro",
    "M√™s Planilha Financeiro", "Observa√ß√µes"
]

# Fun√ß√£o para salvar os dados no Excel
def save_data(df):
    df.to_excel(FILE_PATH, index=False)

# Fun√ß√£o para carregar os dados existentes ou criar uma nova planilha
def load_data():
    if os.path.exists(FILE_PATH):
        df = pd.read_excel(FILE_PATH)
        # Garantir que as colunas num√©ricas sejam do tipo correto
        df["Valor"] = df["Valor"].astype(int)
        # Verifica se todas as colunas necess√°rias est√£o presentes, caso contr√°rio, cria-las
        for col in required_columns:
            if col not in df.columns:
                df[col] = None  # Adiciona as colunas ausentes
        return df
    else:
        # Se o arquivo n√£o existir, cria um novo DataFrame com as colunas necess√°rias
        df = pd.DataFrame(columns=required_columns)
        # Salvar a nova planilha vazia no disco
        save_data(df)
        return df

# T√≠tulo da aplica√ß√£o
st.markdown("""
    <style>
        .titulo-customizado {
            font-size: 27px;  # Ajuste o tamanho conforme necess√°rio
            font-weight: bold;
            text-align: center;
        }
    </style>
    <div class="titulo-customizado">Cadastro e Consulta de Notas Fiscais</div>
""", unsafe_allow_html=True)

# Usar CSS para centralizar "Escolha a op√ß√£o" na p√°gina
st.markdown("""
    <style>
        /* Centraliza o texto "Escolha a op√ß√£o" */
        .centralizado {
            display: flex;
            justify-content: center;
            text-align: center;
            font-size: 15px;
            margin-bottom: 10px;
        }

        /* Centraliza as op√ß√µes do radio */
        .stRadio {
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo "Escolha a op√ß√£o" centralizado
st.markdown('<div class="centralizado">Escolha a op√ß√£o</div>', unsafe_allow_html=True)

# Criando as abas de navega√ß√£o com √≠cones e layout horizontal
menu = st.radio(
    "",
    ("Cadastro de NF","Editar NF", "Consulta de NF"),  # Adiciona "Editar NF"
    index=0,
    format_func=lambda x: f"üìù {x}" if x == "Cadastro de NF" else f"üîç {x}" if x == "Consulta de NF" else f"‚úèÔ∏è {x}",
    horizontal=True
)

# Se o usu√°rio escolher "Editar NF"
if menu == "Editar NF":
    # Selectbox para escolher entre "Editar" ou "Excluir"
    action = st.selectbox("Escolha a a√ß√£o", ["Editar", "Excluir"])
    if action == "Editar":
        st.header("Editar Notas Fiscais")

        # Carregar os dados
        df = load_data()

        # Campo de busca para escolher a NF que deseja editar
        nf_selecionada = st.selectbox(
            "Qual NF voc√™ quer editar?",
            options=["Selecione..."] + list(df["N√∫mero NF"].unique())  # Adiciona a op√ß√£o de selecionar uma NF
        )

        if nf_selecionada != "Selecione...":
            # Filtrar a NF selecionada
            nf_data = df[df["N√∫mero NF"] == nf_selecionada].iloc[0]

            # Exibir os campos de cadastro com os dados atuais da NF
            txt_numero_nf = st.text_input("N√∫mero da NF", value=nf_data["N√∫mero NF"], disabled=True)
            date_data = st.date_input("Data da NF", value=pd.to_datetime(nf_data["Data"]))
            txt_valor = st.number_input("Valor", min_value=0, value=nf_data["Valor"])
            txt_fornecedor = st.text_input("Fornecedor", value=nf_data["Fornecedor"])
            txt_descricao = st.text_area("Descri√ß√£o", value=nf_data["Descri√ß√£o"])

            # Adicionando os novos campos de entrada com os dados atuais da NF
            txt_projeto = st.text_input("Projeto", value=nf_data["Projeto"])
            txt_tipo = st.text_input("Tipo", value=nf_data["Tipo"])
            txt_produto = st.text_input("Produto", value=nf_data["Produto"])
            txt_desc_item = st.text_input("Descri√ß√£o do item", value=nf_data["Descri√ß√£o do item"])
            txt_mes_contratado = st.text_input("M√™s contratado", value=nf_data["M√™s contratado"])
            txt_rc_contrato = st.text_input("RC, Contrato ou Direto", value=nf_data["RC, Contrato ou Direto"])
            date_faturamento_nf = st.date_input("Data de faturamento NF", value=pd.to_datetime(nf_data["Data de faturamento NF"]))
            date_recebimento_nf = st.date_input("Data Recebimento NF", value=pd.to_datetime(nf_data["Data Recebimento NF"]))
            date_lancamento_nf = st.date_input("Data de lan√ßamento NF", value=pd.to_datetime(nf_data["Data de lan√ßamento NF"]))
            txt_validacao_financeiro = st.text_input("Valida√ß√£o Financeiro", value=nf_data["Valida√ß√£o Financeiro"])
            txt_mes_planilha_financeiro = st.text_input("M√™s Planilha Financeiro", value=nf_data["M√™s Planilha Financeiro"])
            txt_observacoes = st.text_area("Observa√ß√µes", value=nf_data["Observa√ß√µes"])

            # Bot√£o de salvar
            # Bot√£o de salvar
            if st.button("Salvar Altera√ß√µes"):
                # Atualiza os dados da NF selecionada
                df.loc[df["N√∫mero NF"] == nf_selecionada, [
                    "Data", "Valor", "Fornecedor", "Descri√ß√£o", "Projeto", "Tipo", "Produto", 
                    "Descri√ß√£o do item", "M√™s contratado", "RC, Contrato ou Direto", 
                    "Data de faturamento NF", "Data Recebimento NF", "Data de lan√ßamento NF", 
                    "Valida√ß√£o Financeiro", "M√™s Planilha Financeiro", "Observa√ß√µes"
                ]] = [
                    date_data, txt_valor, txt_fornecedor, txt_descricao, txt_projeto, txt_tipo, 
                    txt_produto, txt_desc_item, txt_mes_contratado, txt_rc_contrato, date_faturamento_nf, 
                    date_recebimento_nf, date_lancamento_nf, txt_validacao_financeiro, 
                    txt_mes_planilha_financeiro, txt_observacoes
                ]

                # Salvar as altera√ß√µes no arquivo Excel
                save_data(df)

                st.success("Nota Fiscal editada com sucesso!")
                # Limpar campos e voltar para a tela inicial
                nf_selecionada = "Selecione..."  # Resetando o selectbox manualmente
            # Se o usu√°rio escolher "Editar"

 # Se o usu√°rio escolher "Excluir"
    elif action == "Excluir":
        df = load_data()
        st.header("Excluir Nota Fiscal")
        
        # Exibir a lista de NFs cadastradas para o usu√°rio escolher
        nfs = df["N√∫mero NF"].tolist()
        nf_to_delete = st.selectbox("Escolha a NF para Excluir", nfs)
        
        # Aviso de exclus√£o
        st.warning(f"Aten√ß√£o! A NF {nf_to_delete} ser√° exclu√≠da permanentemente do arquivo original.")

        # Bot√£o para confirmar a exclus√£o
        if st.button(f"Confirmar Exclus√£o da NF {nf_to_delete}"):
            # Excluir a NF selecionada
            df = df[df["N√∫mero NF"] != nf_to_delete]
            save_data(df)  # Salvar as altera√ß√µes no arquivo
            st.success(f"NF {nf_to_delete} exclu√≠da com sucesso!")

# Se o usu√°rio escolher "Cadastro de NF"
if menu == "Cadastro de NF":
    st.header("Cadastro de Notas Fiscais")
    
    import locale
   


    df = load_data()

    # Campos de entrada com controle de session_state
    if "txt_numero_nf" not in st.session_state:
        st.session_state.txt_numero_nf = 0
    if "date_data" not in st.session_state:
        st.session_state.date_data = None
    if "txt_valor" not in st.session_state:
        st.session_state.txt_valor = 0.0
    if "txt_fornecedor" not in st.session_state:
        st.session_state.txt_fornecedor = ""
    if "txt_descricao" not in st.session_state:
        st.session_state.txt_descricao = ""
    if "txt_projeto" not in st.session_state:
        st.session_state.txt_projeto = ""
    if "txt_tipo" not in st.session_state:
        st.session_state.txt_tipo = ""
    if "txt_produto" not in st.session_state:
        st.session_state.txt_produto = ""
    if "txt_desc_item" not in st.session_state:
        st.session_state.txt_desc_item = ""
    if "txt_mes_contratado" not in st.session_state:
        st.session_state.txt_mes_contratado = ""
    if "txt_rc_contrato" not in st.session_state:
        st.session_state.txt_rc_contrato = ""
    if "date_faturamento_nf" not in st.session_state:
        st.session_state.date_faturamento_nf = None
    if "date_recebimento_nf" not in st.session_state:
        st.session_state.date_recebimento_nf = None
    if "date_lancamento_nf" not in st.session_state:
        st.session_state.date_lancamento_nf = None
    if "txt_validacao_financeiro" not in st.session_state:
        st.session_state.txt_validacao_financeiro = ""
    if "txt_mes_planilha_financeiro" not in st.session_state:
        st.session_state.txt_mes_planilha_financeiro = ""
    if "txt_observacoes" not in st.session_state:
        st.session_state.txt_observacoes = ""

    txt_numero_nf = st.number_input(
        "N√∫mero da NF", 
        value=int(st.session_state.get("txt_numero_nf", 0.0))  # Garantir que seja float
    )
    # Lista de fornecedores j√° cadastrados no DataFrame
    fornecedores_existentes = df["Fornecedor"].unique().tolist()

    # Verifique se h√° fornecedores existentes
    if len(fornecedores_existentes) > 0:
        # Se houver fornecedores, coloque a op√ß√£o "Novo fornecedor..." como primeira op√ß√£o
        fornecedor_opcao = st.selectbox(
            "Fornecedor", 
            options=["Novo fornecedor..."] + fornecedores_existentes,  # A PRIMEIRA op√ß√£o ser√° para novo fornecedor
            index=0  # Come√ßa com "Novo fornecedor..."
        )
    else:
        # Se n√£o houver fornecedores cadastrados, s√≥ permita a op√ß√£o de novo fornecedor
        fornecedor_opcao = st.selectbox(
            "Fornecedor", 
            options=["Novo fornecedor..."],  # S√≥ a op√ß√£o para novo fornecedor
            index=0  # Come√ßa com a √∫nica op√ß√£o dispon√≠vel
        )

    # Condicional: Se a op√ß√£o "Novo fornecedor..." for escolhida, exibe o campo para inserir um novo fornecedor
    if fornecedor_opcao == "Novo fornecedor...":
        novo_fornecedor = st.text_input("Digite o nome do novo fornecedor")
        if novo_fornecedor:
            st.session_state.novo_fornecedor = novo_fornecedor
            # Exibe a mensagem apenas quando o novo fornecedor for digitado
            st.write(f"Novo fornecedor adicionado: {novo_fornecedor}")
        else:
            st.session_state.novo_fornecedor = ""  # Caso o campo fique vazio
            st.write("")  # Nenhuma mensagem exibida
    else:
        # Caso um fornecedor existente seja selecionado
        novo_fornecedor = fornecedor_opcao
        st.session_state.novo_fornecedor = ""  # N√£o h√° "novo fornecedor", j√° foi selecionado
        # Exibe a mensagem apenas se o fornecedor for selecionado (n√£o mais a "Novo fornecedor" texto)
        st.write(f"Fornecedor selecionado: {novo_fornecedor}")


    # Exibir o fornecedor selecionado, bloqueado para edi√ß√£o
    st.selectbox("Fornecedor", options=[novo_fornecedor], disabled=True)
    # Campos de entrada para o cadastro

    date_data = st.date_input("Data da NF", value=st.session_state.date_data, format="DD/MM/YYYY")
    txt_valor = st.number_input("Valor (R$)", value=st.session_state.txt_valor)

    # Adicionando os novos campos de entrada
    txt_projeto = st.text_input("Projeto", value=st.session_state.txt_projeto)
    txt_tipo = st.text_input("Tipo", value=st.session_state.txt_tipo)
    
    txt_produto = st.text_input("Produto", value=st.session_state.txt_produto)
    txt_desc_item = st.text_input("Descri√ß√£o do item", value=st.session_state.txt_desc_item)
    txt_mes_contratado = st.text_input("M√™s contratado", value=st.session_state.txt_mes_contratado)
    txt_rc_contrato = st.text_input("RC, Contrato ou Direto", value=st.session_state.txt_rc_contrato)
    date_faturamento_nf = st.date_input("Data de faturamento NF", value=st.session_state.date_faturamento_nf, format="DD/MM/YYYY")
    date_recebimento_nf = st.date_input("Data Recebimento NF", value=st.session_state.date_recebimento_nf, format="DD/MM/YYYY")
    date_lancamento_nf = st.date_input("Data de lan√ßamento NF", value=st.session_state.date_lancamento_nf, format="DD/MM/YYYY")
    txt_validacao_financeiro = st.text_input("Valida√ß√£o Financeiro", value=st.session_state.txt_validacao_financeiro)
    txt_mes_planilha_financeiro = st.text_input("M√™s Planilha Financeiro", value=st.session_state.txt_mes_planilha_financeiro)
    txt_observacoes = st.text_area("Observa√ß√µes", value=st.session_state.txt_observacoes)

    
 # Bot√£o de salvar
    if st.button("Salvar"):
        if txt_numero_nf and novo_fornecedor:
            df = load_data()

            # Verificar se NF j√° existe
            if txt_numero_nf in df["N√∫mero NF"].values:
                st.warning("Essa NF j√° foi cadastrada!")
            else:
                campos_obrigatorios_nao_preenchidos = []
                    # Verificar campos obrigat√≥rios
                if not txt_valor:
                    campos_obrigatorios_nao_preenchidos.append("Valor")
                if not txt_produto:
                    campos_obrigatorios_nao_preenchidos.append("Produto")

                if campos_obrigatorios_nao_preenchidos:
                    st.warning(f"Os seguintes campos n√£o foram preenchidos: {', '.join(campos_obrigatorios_nao_preenchidos)}")
       
            
                novo_registro = pd.DataFrame({
                    "N√∫mero NF": [txt_numero_nf],
                    "Data": [date_data],
                    "Valor": [txt_valor],
                    "Fornecedor": [novo_fornecedor],
                    "Descri√ß√£o": [st.session_state.txt_descricao],
                    "Projeto": [txt_projeto],
                    "Tipo": [txt_tipo],
                    "Produto": [txt_produto],
                    "Descri√ß√£o do item": [txt_desc_item],
                    "M√™s contratado": [txt_mes_contratado],
                    "RC, Contrato ou Direto": [txt_rc_contrato],
                    "Data de faturamento NF": [date_faturamento_nf],
                    "Data Recebimento NF": [date_recebimento_nf],
                    "Data de lan√ßamento NF": [date_lancamento_nf],
                    "Valida√ß√£o Financeiro": [txt_validacao_financeiro],
                    "M√™s Planilha Financeiro": [txt_mes_planilha_financeiro],
                    "Observa√ß√µes": [txt_observacoes]
                })
                df = pd.concat([df, novo_registro], ignore_index=True)
                save_data(df)
                st.success(f"Nota Fiscal {txt_numero_nf} cadastrada com sucesso!")

                # Resetar os campos de input para os valores padr√£o
                st.session_state.txt_numero_nf = 0
                st.session_state.date_data = None
                st.session_state.txt_valor = 0.0
                st.session_state.novo_fornecedor = ""
                st.session_state.txt_descricao = ""
                st.session_state.txt_projeto = ""
                st.session_state.txt_tipo = ""
                st.session_state.txt_produto = ""
                st.session_state.txt_desc_item = ""
                st.session_state.txt_mes_contratado = ""
                st.session_state.txt_rc_contrato = ""
                st.session_state.date_faturamento_nf = None
                st.session_state.date_recebimento_nf = None
                st.session_state.date_lancamento_nf = None
                st.session_state.txt_validacao_financeiro = ""
                st.session_state.txt_mes_planilha_financeiro = ""
                st.session_state.txt_observacoes = ""

        else:
            st.error("Preencha os campos obrigat√≥rios: N√∫mero NF, Fornecedor e Data da NF.")
# Se o usu√°rio escolher "Consulta de NF"
elif menu == "Consulta de NF":
    st.header("Consulta de Notas Fiscais")
    

    # Barra lateral para filtros
    st.sidebar.header("Filtros")

    # Carregar os dados
    df = load_data()

    # Verificar se a coluna "Data" tem dados v√°lidos
    if df["Data"].notna().any():
        data_inicio_default = df["Data"].min()
        data_fim_default = df["Data"].max()
    else:
          # Se n√£o houver dados v√°lidos, definimos datas padr√£o
        data_inicio_default = pd.to_datetime("2020-01-01").date()
        data_fim_default = pd.to_datetime("2020-01-01").date()

    # Filtros
    nota_filtrar = st.sidebar.multiselect(
        "N√∫mero NF",
        options=list(df["N√∫mero NF"].unique()),  # Remove a op√ß√£o "Todos"
        default=[]  # Filtro vazio por padr√£o, ou seja, nada selecionado inicialmente
    )

    # Filtros
    fornecedor_filtrar = st.sidebar.multiselect(
        "Fornecedor",
        options=list(df["Fornecedor"].unique()),  # Remove a op√ß√£o "Todos"
        default=[]  # Filtro vazio por padr√£o, ou seja, nada selecionado inicialmente
    )

    # Se nenhum fornecedor for selecionado, incluir todos os fornecedores
    if not fornecedor_filtrar:
        fornecedor_filtrar = df["Fornecedor"].unique()

    # Se nenhum n√∫mero de NF for selecionado, incluir todos os n√∫meros de NF
    if not nota_filtrar:
        nota_filtrar = df["N√∫mero NF"].unique()

    # Definir data de in√≠cio e fim com verifica√ß√£o de dados v√°lidos
    data_inicio = st.sidebar.date_input(
        "Data In√≠cio", 
        data_inicio_default,  # Usa a data m√≠nima se houver dados ou data padr√£o
        format="DD/MM/YYYY"
    )

    data_fim = st.sidebar.date_input(
        "Data Fim", 
        data_fim_default,  # Usa a data m√°xima se houver dados ou data padr√£o
        format="DD/MM/YYYY"
    )

    # Aplicar filtros
    df_filtrado = df[
        (df["Fornecedor"].isin(fornecedor_filtrar)) &
        (df["Data"] >= pd.to_datetime(data_inicio)) &
        (df["Data"] <= pd.to_datetime(data_fim)) &
        (df["N√∫mero NF"].isin(nota_filtrar))
    ]


      # Verifica se o DataFrame filtrado tem dados ap√≥s a aplica√ß√£o dos filtros
    if df_filtrado.empty:
        st.write("Nenhum registro encontrado com os filtros aplicados.")
    else:
        # Exibir os registros filtrados
        df_filtrado["Data"] = pd.to_datetime(df_filtrado["Data"]).dt.strftime("%d/%m/%Y")  # Formatar data no formato BR

        # Calcular o n√∫mero total de registros
        num_linhas = len(df_filtrado)

        # Definir o n√∫mero de registros por p√°gina
        registros_por_pagina = 30

        # Calcular o n√∫mero total de p√°ginas
        num_paginas = num_linhas // registros_por_pagina + (1 if num_linhas % registros_por_pagina != 0 else 0)

        # Se o usu√°rio selecionar uma p√°gina, ou a p√°gina inicial (1)
        pagina_atual = st.session_state.get('pagina_atual', 1)  # Armazenar o estado da p√°gina em session_state

        # Calcular os √≠ndices de in√≠cio e fim para o DataFrame
        inicio = (pagina_atual - 1) * registros_por_pagina
        fim = inicio + registros_por_pagina

        # Exibir a parte da tabela correspondente √† p√°gina atual
        df_pagina = df_filtrado.iloc[inicio:fim]

        # Adicionar um bot√£o expans√≠vel para selecionar as colunas
        with st.expander("Escolha as colunas para exibir"):
            # Criar uma lista de todas as colunas dispon√≠veis
            colunas_disponiveis = df.columns.tolist()
            
            # Criar o multiselect dentro do expander
            colunas_selecionadas = st.multiselect(
                "Selecione as colunas para exibir",
                options=colunas_disponiveis,
                default=colunas_disponiveis  # Exibe todas por padr√£o
            )
                


    # Fun√ß√£o para dividir a tabela em p√°ginas
    def get_page(df, page_number, rows_per_page=len(df_filtrado)):
        start_row = (page_number - 1) * rows_per_page
        end_row = start_row + rows_per_page
        return df.iloc[start_row:end_row]

    # Vari√°veis de controle de p√°gina
    # Filtrar as colunas selecionadas no multiselect
    
    df_filtrado = df_filtrado[colunas_selecionadas]
    if "Valor" in colunas_selecionadas:
        df_filtrado['Valor'] = df_filtrado['Valor'].apply(lambda x: f"R$ {x:,.2f}")
    num_paginas = len(df_filtrado) // 50 + (1 if len(df_filtrado) % 50 > 0 else 0)

    # P√°ginas no session_state para manter o controle de navega√ß√£o
    if "pagina_atual" not in st.session_state:
        st.session_state.pagina_atual = 1

    pagina_atual = st.session_state.pagina_atual

    # Exibir a tabela da p√°gina atual (sem criar um novo DataFrame)
    df_pagina_selecionada = get_page(df_filtrado, pagina_atual)
    
    # Contar o n√∫mero de linhas no DataFrame
    num_linhas = len(df_pagina_selecionada)
    # Exibir o resultado com destaque para o n√∫mero
    st.markdown(f"""
        <span style='font-size: 15px; '>Notas fiscais encontradas</span>: 
        <span style='font-size: 16px; color: green; font-weight: bold;'>{num_linhas}</span>
    """, unsafe_allow_html=True)

    st.dataframe(df_pagina_selecionada)



